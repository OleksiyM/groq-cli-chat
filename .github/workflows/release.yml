name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  release:
    name: Build and upload release assets
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        include:
          - goos: windows
            ext: .zip
          - goos: linux
            ext: .tar.gz
          - goos: darwin
            ext: .tar.gz

    env:
      APP_NAME: groq-chat
      GO_VERSION: '1.24.1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set version from tag
        id: vars
        run: |
          TAG_NAME="${{ github.ref_name }}"
          echo "version=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Build binary
        run: |
          mkdir -p dist
          OUTPUT_NAME=${APP_NAME}
          [ "${{ matrix.goos }}" = "windows" ] && OUTPUT_NAME="${APP_NAME}.exe"

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
            go build -ldflags "-s -w -X main.version=${{ steps.vars.outputs.version }}" \
            -o $OUTPUT_NAME ./cmd/groq-cli-chat

          PACKAGE_NAME="${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
          if [[ "${{ matrix.ext }}" == ".zip" ]]; then
            zip -q "dist/$PACKAGE_NAME" "$OUTPUT_NAME"
          else
            tar -czf "dist/$PACKAGE_NAME" "$OUTPUT_NAME"
          fi

      - name: Upload artifact to release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

