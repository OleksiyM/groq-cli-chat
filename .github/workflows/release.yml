name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  IMAGE_NAME: OleksiyML/groq-chat
  GO_VERSION: '1.24.1'

jobs:
  build:
    name: Build and Publish Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: arm64  #  macOS ARM
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up variables
        id: vars
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_ENV
          echo "BIN_NAME=mychatapp-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_ENV

      - name: Build binary
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/${BIN_NAME} ./cmd/mychatapp

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.VERSION }}
          files: dist/${{ env.BIN_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${VERSION} .

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${VERSION}