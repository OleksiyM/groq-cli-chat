name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: groq-chat
  GO_VERSION: '1.24.1'
  IMAGE_NAME: oleksiyml/groq-chat

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up output file name
        run: |
          BIN_NAME="${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          echo "BIN_NAME=${BIN_NAME}${EXT}" >> $GITHUB_ENV

      - name: Build binary
        run: |
          mkdir -p bin/release
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -o bin/release/${{ env.BIN_NAME }} ./cmd/groq-chat

      - name: Package binary
        run: |
          cd bin/release
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip ${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${{ env.BIN_NAME }}
          else
            tar -czf ${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ${{ env.BIN_NAME }}
          fi

      - name: Upload packaged binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            bin/release/*.zip
            bin/release/*.tar.gz

  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/release

      - name: Upload all release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          files: bin/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}