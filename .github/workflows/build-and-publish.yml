name: Build, Test, Publish & Release groq-cli-chat

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [main]
  release:
    types: [created]

env:
  GO_VERSION: '1.24.1'
  DOCKER_IMAGE_BASE: ${{ secrets.DOCKERHUB_USERNAME }}/groq-cli-chat

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - run: go mod tidy

      - run: go test ./... -v

      - name: Get Version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          fi

      - name: Build release binaries
        run: make release
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

      - run: ls -lR bin/release

      - uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.get_version.outputs.version }}
          path: bin/release/*
          retention-days: 7

  publish-docker:
    name: Publish Docker (${{ matrix.distro }}/${{ matrix.arch }})
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - distro: debian
            dockerfile: ./Dockerfile
            arch: amd64
          - distro: debian
            dockerfile: ./Dockerfile
            arch: arm64
          - distro: rhel
            dockerfile: ./Dockerfile-rhel
            arch: amd64
          - distro: rhel
            dockerfile: ./Dockerfile-rhel
            arch: arm64
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Get Version from Needs
        id: get_version
        run: echo "version=${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          name: binaries-${{ steps.get_version.outputs.version }}
          path: ./downloaded-binaries

      - name: Prepare Docker build context
        run: |
          mkdir -p ./docker-context/
          cp downloaded-binaries/linux-${{ matrix.arch }}/groq-chat ./docker-context/
          cp ${{ matrix.dockerfile }} ./docker-context/Dockerfile

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check Docker login
        run: docker info

      - name: Build & Push Docker
        uses: docker/build-push-action@v6
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile
          platforms: linux/${{ matrix.arch }}
          build-args: |
            ARCH=${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_BASE }}:${{ steps.get_version.outputs.version }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.DOCKER_IMAGE_BASE }}:latest-${{ matrix.distro }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-github-release:
    name: Create GitHub Release
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Version from Needs
        id: get_version
        run: echo "version=${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          name: binaries-${{ steps.get_version.outputs.version }}
          path: ./release-assets

      - run: ls -lR ./release-assets

      - uses: softprops/action-gh-release@v2
        with:
          files: ./release-assets/flat/*
