name: Build, Test, and Publish groq-cli-chat

permissions:
  contents: write  # Required for create-release job to upload assets

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Debug directory structure
        run: |
          ls -R

      - name: Run tests
        run: |
          go test ./... -v

      - name: Build for Linux (AMD64)
        run: |
          mkdir -p bin/release/linux-amd64
          GOOS=linux GOARCH=amd64 go build -o bin/release/linux-amd64/groq-chat ./cmd/groq-chat
          tar -czf bin/release/groq-chat-linux-amd64.tar.gz -C bin/release/linux-amd64 groq-chat

      - name: Build for Linux (ARM64)
        run: |
          mkdir -p bin/release/linux-arm64
          GOOS=linux GOARCH=arm64 go build -o bin/release/linux-arm64/groq-chat ./cmd/groq-chat
          tar -czf bin/release/groq-chat-linux-arm64.tar.gz -C bin/release/linux-arm64 groq-chat

      - name: Build for macOS (AMD64)
        run: |
          mkdir -p bin/release/macos-amd64
          GOOS=darwin GOARCH=amd64 go build -o bin/release/macos-amd64/groq-chat ./cmd/groq-chat
          tar -czf bin/release/groq-chat-macos-amd64.tar.gz -C bin/release/macos-amd64 groq-chat

      - name: Build for Windows (AMD64)
        run: |
          mkdir -p bin/release/windows-amd64
          GOOS=windows GOARCH=amd64 go build -o bin/release/windows-amd64/groq-chat.exe ./cmd/groq-chat
          zip -j bin/release/groq-chat-windows-amd64.zip bin/release/windows-amd64/groq-chat.exe

      - name: Upload binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            bin/release/*.tar.gz
            bin/release/*.zip

  publish-docker:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/release

      - name: Extract binaries
        run: |
          mkdir -p bin/release/linux-amd64
          tar -xzf bin/release/groq-chat-linux-amd64.tar.gz -C bin/release/linux-amd64
          mkdir -p bin/release/linux-arm64
          tar -xzf bin/release/groq-chat-linux-arm64.tar.gz -C bin/release/linux-arm64
          ls -lh bin/release/linux-amd64/groq-chat
          ls -lh bin/release/linux-arm64/groq-chat

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          ecr: auto
          logout: true

      - name: Build and push (Debian)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            OleksiyM/groq-cli-chat:${{ github.event.release.tag_name }}-debian
            OleksiyM/groq-cli-chat:latest-debian
          build-args: |
            ARCH=amd64
            ARCH=arm64

      - name: Build and push (RHEL)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-rhel
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            OleksiyM/groq-cli-chat:${{ github.event.release.tag_name }}-rhel
            OleksiyM/groq-cli-chat:latest-rhel
          build-args: |
            ARCH=amd64
            ARCH=arm64

  create-release:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/release

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const github = require('@actions/github');
            const context = github.context;
            
            const release_id = context.payload.release.id;
            const token = process.env.GITHUB_TOKEN;
            
            const octokit = github.getOctokit(token);
            
            const files = [
              'bin/release/groq-chat-linux-amd64.tar.gz',
              'bin/release/groq-chat-linux-arm64.tar.gz',
              'bin/release/groq-chat-macos-amd64.tar.gz',
              'bin/release/groq-chat-windows-amd64.zip'
            ];
            
            for (const file of files) {
              const fileName = file.split('/').pop();
              await octokit.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: fileName,
                data: fs.readFileSync(file),
              });
            }